function Export-Import-BCObjects-UAT-PROD
{
    [CmdletBinding()]
    param(
        [Parameter()][String] $SOXNumber, [switch]$Force = $false
    )
    if (($SOXNumber -eq "")) 
    {
        Write-Host("Version tag is empty. Specify it in the pipeline variables. Quitting.")
        return
    }
    #TODO Change -RelativeFilePath to Live may be found in Globals.cfg when in prod. 
    $ProdEnvConfig = Get-EnvironmentConfig -EnvironmentType 'PRD' -RelativeFilePath $SampleBCServerConfig
    $UatEnvConfig = Get-EnvironmentConfig -EnvironmentType 'UAT' -RelativeFilePath $SampleBCServerConfig
    $DevEnvConfig = Get-EnvironmentConfig -EnvironmentType 'DEV' -RelativeFilePath $SampleBCServerConfig
    $ServersWithServicesToRestart = $ProdEnvConfig.ServersWithServicesToRestart
    # 0) Check if record status is ready
    $SoxApprovalObject = Get-SoxApprovalRecordFromTarget -SOXNumber $SOXNumber -ProdEnvConfig $ProdEnvConfig
    $SoxApprovalObjectStatus = $SOXApprovalObject.Status
    #Write-Host("Run Restart-BC-Services")
    if ($SoxApprovalObjectStatus -eq "")
    {
        Write-Host("Sox Change managment record Not Found in  $($ProdEnvConfig.DatabaseName) ") -ForegroundColor Cyan
        return  
    }
    if ($SoxApprovalObjectStatus -ne $ProdEnvConfig.StatusCodeToImportObjectsToThisEnv)
    {
        Write-Host("To run the pipeline Sox Change managment record  Rec.Status should be equal to $($ProdEnvConfig.StatusCodeToImportObjectsToThisEnv), current value is:  $SoxApprovalObjectStatus")
        return
    }
    # Write to Verbose message stream to allow the use of -Verbose on cmdlets
    Write-Verbose "Prepare Implementation of SOX Number $SOXNumber"
    # 1) Create Folders for Objects, if necessary
    $NavFolders = New-FoldersForSOX -SOXNumber $SOXNumber -SourceEnvironment $UatEnvConfig.Name -TargetEnvironment  $ProdEnvConfig.Name -Verbose 
    $TargetObjectsBackupFolder = $NavFolders.TargetObjectsBackupFolder
    $ChangedObjectsSourceFolder = $NavFolders.ChangedObjectsSourceFolder
    # 2) Find changed objects in DEV
    #   (NB! Take into consideration that it may be a new object, that does not exist, i.e. no object to store in the originals folder !)
    $ChangedObjects = Get-ChangedObjects -SOXNumber $SOXNumber -SourceEnvironmentConfig $UatEnvConfig -Verbose
    # 3) Export original objects from PROD as .txt and .fob as single object files
    Write-Verbose "Export original objects from PROD as .txt and .fob as single object files"

    [bool]$PreliminaryIsExported = $false
    [bool]$IsExported = $false
    [bool]$ObjectSetIncludesTable = $false
    $ChangedObjects | ForEach-Object {
        $PreliminaryIsExported = Export-Objects -Force $true -Object $_ -TargetObjectsBackupFolder $TargetObjectsBackupFolder `
                                 -ChangedObjectsSourceFolder $ChangedObjectsSourceFolder -IsAnyObjectExported $PreliminaryIsExported `
                                 -TargetEnvironmentConfig $ProdEnvConfig -SourceEnvironmentConfig $UatEnvConfig
        if ($ObjectSetIncludesTable -eq $false)
        {
           if ($_.ObjectType -eq "table")
           {
            $ObjectSetIncludesTable = $true
            Write-Host("Objects to import include table(s), NAS services will be restarted (PENDING DEVELOPMENT)");
           }
        }
        if (($IsExported -ne $true) -and ($PreliminaryIsExported -eq $true)) 
        {
            $IsExported = $PreliminaryIsExported
        }
    }
    if ($IsExported -eq $false)
    {
        Write-Host "Nothing to export, quitting"
        return
    }
    # 4) Export changed objects as one .fob package from DEV
    Write-Verbose "Export changed objects as one .fob package from DEV"
    $FilterString = Get-Filter-By-SOXNumber -SOXNumber $SOXNumber
    $FobFile = $SOXNumber + "_" + [DateTime]::Today.ToString("ddMMyyyy") + ".fob"
    write-Host "Filter String $FilterString"
    Export-NAVApplicationObject -DatabaseName $UatEnvConfig.DatabaseName -DatabaseServer $UatEnvConfig.DatabaseServerName -Path $ChangedObjectsSourceFolder\$FobFile -Filter $FilterString -Confirm:$false -Force
    Import-BCLicenseToTargetDatabase -TargetEnvironmentConfiguration $ProdEnvConfig
    $PreviouslyStoppedServicesNamesArr = Stop-BCServicesExceptForTarget -TargetEnvConfig $ProdEnvConfig
    if ( $PreviouslyStoppedServicesNamesArr.Count -ne 0)
    {
        Write-Host("Previously stopped services are: " + $PreviouslyStoppedServicesNamesArr)
    }
    # 6) Import combined object file to the required environment
    #TODO May require doing it on a specific server azure agent
    Restart-NAVServerInstance -ServerInstance $ProdEnvConfig.TargetBCServerInstance
    #Wait-ForServerOperational -ServerInstance $ProdEnvConfig.TargetBCServerInstance
    if ($ObjectSetIncludesTable -eq $true) 
    {
        Cust-Import-NAVApplicationObject -DatabaseServer $ProdEnvConfig.DatabaseServerName -DatabaseName $ProdEnvConfig.DatabaseName `
        -Path $ChangedObjectsSourceFolder\$FobFile -NavServerInstance $ProdEnvConfig.TargetBCServerInstance -NavServerName $ProdEnvConfig.TargetBCServerName`
        -ImportAction Overwrite -SynchronizeSchemaChanges Force -NavServerManagementPort $ProdEnvConfig.ManagmentPort -Verbose
    } 
    else 
    {
        Cust-Import-NAVApplicationObject -DatabaseServer $ProdEnvConfig.DatabaseServerName -DatabaseName $ProdEnvConfig.DatabaseName `
        -Path $ChangedObjectsSourceFolder\$FobFile -NavServerInstance $ProdEnvConfig.TargetBCServerInstance -NavServerName $ProdEnvConfig.TargetBCServerName`
        -ImportAction Overwrite -SynchronizeSchemaChanges Yes -NavServerManagementPort $ProdEnvConfig.ManagmentPort -Verbose
    }
    Compile-NAVApplicationObject -DatabaseName $ProdEnvConfig.DatabaseName -DatabaseServer $ProdEnvConfig.DatabaseServerName `
    -Filter $FilterString -NavServerInstance $ProdEnvConfig.TargetBCServerInstance -NavServerName $ProdEnvConfig.TargetBCServerName -NavServerManagementPort $ProdEnvConfig.ManagmentPort `
    -SynchronizeSchemaChanges Yes #-Force
    #TODO May require doing it on a specific server azure agent
    Restart-NAVServerInstance -ServerInstance $ProdEnvConfig.TargetBCServerInstance
    #Write-Host($PreviouslyStoppedServicesNamesArr)
    Start-BCServicesExceptForTarget -TargetEnvConfig $ProdEnvConfig  -PreviouslyStoppedServicesNamesArr $PreviouslyStoppedServicesNamesArr
    Write-Output "Object(s) exported from $($DevEnvConfig.DatabaseName). Imported into $($ProdEnvConfig.DatabaseName) on $($ProdEnvConfig.TargetBCServerName), with schema changes applied if required. Compiled."
    #TODO Importing configuaration package data (BC objects not present in live DEV and UAT)
    #Invoke-NAVCodeunit -ServerInstance $UatEnvConfig.TargetBCServerInstance -CompanyName $UatEnvConfig.CompanyNameToOperate -CodeunitId 8614 -MethodName 'InPipelineExportConfigurationPackagesNoConfirmation' -Argument "$SOXNumber,$FolderPathToStoreConfigPackageFilesIn"
    #Invoke-NAVCodeunit -ServerInstance $ProdEnvConfig.TargetBCServerInstance -CompanyName $ProdEnvConfig.CompanyNameToOperate -CodeunitId 8614 -MethodName 'ImportPackageXMLFromPathAndApplyPackage' -Argument "$SOXNumber,$FolderPathToStoreConfigPackageFilesIn"
    Write-Host("Starting the following instances: " + $ServersWithServicesToRestart)
    # TODO Updating SOX Approval Record UPDATE later on once approvedby Charlie
    #Update-SoxApprovalRecordInProd -SoxNumber $SOXNumber -NewStatusCode $ProdEnvConfig.StatusCodeAfterImportObjectsToThisEnv -ProdEnvConfig $ProdEnvConfig -UatEnvConfig $UatEnvConfig
}