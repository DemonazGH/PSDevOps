<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml" xmlns="http://msh">
  <!-- Cmdlet: Compare-NAVApplicationObject -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Compare-NAVApplicationObject</command:name>
      <command:verb>Compare</command:verb>
      <command:noun>NAVApplicationObject</command:noun>
      <maml:description>
        <maml:para>Compares text files with Business Central application objects and then calculates the delta between the two versions. The result of the comparison is a number of text files with the calculated delta. The deltas can later be applied to a third version by using the Update-NAVApplicationObject cmdlet.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Compare-NAVApplicationObject cmdlet to calculate the delta between one version of Business Central application objects and another version. The deltas can later be applied to a third version by using the Update-NAVApplicationObject cmdlet.</maml:para>
      <maml:para>The Compare-NAVApplicationObject cmdlet compares the text files in the two specified folders and creates .delta files that describe the difference between the two versions. The text files must contain Business Central application objects that have been exported from the Development Environment. You can compare two text files that contain multiple application objects, and you can compare text files in two folders where each text file can contain one or more application objects.</maml:para>
      <maml:para>The cmdlet creates a text file for each application object that is different between the two versions. For example, you compare two versions of table 27: an original version and a modified version. The modified version has added a field to the table compared to the original version. In this example, the Compare-NAVApplicationObject cmdlet creates a delta file,TAB27.delta, that describes the difference that the extra field must be inserted into the table. Then, you use the Update-NAVApplicationObject cmdlet to apply the delta to target files.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Compare-NAVApplicationObject</maml:name>
        <!-- Parameter: OriginalPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="Original">
          <maml:name>OriginalPath</maml:name>
          <maml:description>
            <maml:para>Specifies the application objects that are the baseline of the file comparison.</maml:para>
            <maml:para>For example, to use all text files in the ORIGINAL folder that is a subfolder to the current folder, type .\ORIGINAL\*.txt.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: ModifiedPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2" aliases="Modified">
          <maml:name>ModifiedPath</maml:name>
          <maml:description>
            <maml:para>Specifies the application objects that you want to compare to the original version.</maml:para>
            <maml:para>For example, to compare all text files in the MODIFIED folder that is a subfolder to the current folder, type .\MODIFIED\*.txt.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: DeltaPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="3" aliases="Delta">
          <maml:name>DeltaPath</maml:name>
          <maml:description>
            <maml:para>Specifies the folder where the result of the comparison between the two versions of application objects must be put. For example, to place the result of the comparison in the DELTA folder that is a subfolder to the current folder, type .\DELTA\*.txt.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: ExportToNewSyntax -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>ExportToNewSyntax</maml:name>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to overwrite any existing files in the Delta folder.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: IgnoreDocumentation -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>IgnoreDocumentation</maml:name>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Legacy -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="DevBaseCompatibility">
          <maml:name>Legacy</maml:name>
          <maml:description>
            <maml:para>Reduces the scope of the cmdlet. Do not set this parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: NoCodeCompression -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>NoCodeCompression</maml:name>
          <maml:description>
            <maml:para>Specifies if the files that are the result of the comparison must not be compressed.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if the cmdlet must return a FileInfo object for each .delta file that is created by the comparison. If you do not set this parameter, the cmdlet returns a list of the files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: OriginalPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="Original">
        <maml:name>OriginalPath</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that are the baseline of the file comparison.</maml:para>
          <maml:para>For example, to use all text files in the ORIGINAL folder that is a subfolder to the current folder, type .\ORIGINAL\*.txt.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="Original">
        <maml:name>Original</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that are the baseline of the file comparison.</maml:para>
          <maml:para>For example, to use all text files in the ORIGINAL folder that is a subfolder to the current folder, type .\ORIGINAL\*.txt.</maml:para>
          <maml:para>This is an alias of the OriginalPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: ModifiedPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2" aliases="Modified">
        <maml:name>ModifiedPath</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that you want to compare to the original version.</maml:para>
          <maml:para>For example, to compare all text files in the MODIFIED folder that is a subfolder to the current folder, type .\MODIFIED\*.txt.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2" aliases="Modified">
        <maml:name>Modified</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that you want to compare to the original version.</maml:para>
          <maml:para>For example, to compare all text files in the MODIFIED folder that is a subfolder to the current folder, type .\MODIFIED\*.txt.</maml:para>
          <maml:para>This is an alias of the ModifiedPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: DeltaPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="3" aliases="Delta">
        <maml:name>DeltaPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the result of the comparison between the two versions of application objects must be put. For example, to place the result of the comparison in the DELTA folder that is a subfolder to the current folder, type .\DELTA\*.txt.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="3" aliases="Delta">
        <maml:name>Delta</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the result of the comparison between the two versions of application objects must be put. For example, to place the result of the comparison in the DELTA folder that is a subfolder to the current folder, type .\DELTA\*.txt.</maml:para>
          <maml:para>This is an alias of the DeltaPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if the cmdlet must return a FileInfo object for each .delta file that is created by the comparison. If you do not set this parameter, the cmdlet returns a list of the files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Legacy -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="DevBaseCompatibility">
        <maml:name>Legacy</maml:name>
        <maml:description>
          <maml:para>Reduces the scope of the cmdlet. Do not set this parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="DevBaseCompatibility">
        <maml:name>DevBaseCompatibility</maml:name>
        <maml:description>
          <maml:para>Reduces the scope of the cmdlet. Do not set this parameter.</maml:para>
          <maml:para>This is an alias of the Legacy parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: NoCodeCompression -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>NoCodeCompression</maml:name>
        <maml:description>
          <maml:para>Specifies if the files that are the result of the comparison must not be compressed.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: IgnoreDocumentation -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>IgnoreDocumentation</maml:name>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to overwrite any existing files in the Delta folder.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: ExportToNewSyntax -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>ExportToNewSyntax</maml:name>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Compare-NAVApplicationObject -OriginalPath .\demodata\ORIGINAL\*.txt -ModifiedPath .\demodata\MODIFIED\*.txt -DeltaPath
.\demodata\DELTA\

   Processed 14 objects:
   Inserted   0 objects
   Deleted    1 objects
   Changed    4 objects
   Identical  9 objects
   Failed     0 objects</dev:code>
        <dev:remarks>
          <maml:para>This example compares the text files in the MODIFIED folder to the baseline in the ORIGINAL folder. The result of the comparison is put into the DELTA folder. When the comparison completes, a summary is shown.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 2  ----------</maml:title>
        <dev:code>Compare-NAVApplicationObject -OriginalPath .\demodata\ORIGINAL\*.txt -ModifiedPath .\demodata\MODIFIED\*.txt -DeltaPath
.\demodata\DELTA -Force -PassThru | Update-NAVApplicationObject -TargetPath .\demodata\TARGET\*.txt -ResultPath .\demodata\RESULT
-Force

   Processed 14 objects:
   Inserted   0 objects
   Deleted    1 objects
   Updated    3 objects
   Identical  9 objects
   Conflict   1 objects
   Failed     0 objects</dev:code>
        <dev:remarks>
          <maml:para>This example compares the text files in the MODIFIED folder to the baseline in the ORIGINAL folder. The result of the comparison is put into the DELTA folder and also piped to the Update-NAVApplicationObject cmdlet, which applies the updates. When the comparison completes, a summary is shown.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=398882</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Merge-NAVApplicationObject</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Update-NAVApplicationObject</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Merge-NAVApplicationObject -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Merge-NAVApplicationObject</command:name>
      <command:verb>Merge</command:verb>
      <command:noun>NAVApplicationObject</command:noun>
      <maml:description>
        <maml:para>Compares the changes that have been made to application objects between two versions of Microsoft Dynamics NAV, and applies the difference to a third set of application objects. The result of the merge is a number of text files with the merged application objects. Any conflicts that the cmdlet cannot merge are identified in conflict files.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Merge-NAVApplicationObject cmdlet to calculate the changes that have been made to application objects between two versions of Microsoft Dynamics NAV, and to apply the difference to a third set of application objects. You specify an original version and compare that to a latest version. The difference is then applied to the target version. The result of the merge is a number of text files with the merged application objects. Any conflicts that the cmdlet cannot merge are identified in conflict files.</maml:para>
      <maml:para>For example, you can use the cmdlet to apply changes from an update to your version of Microsoft Dynamics NAV. The following list provides examples of the parameter values that you can specify when you merge versions of Microsoft Dynamics NAV:</maml:para>
      <maml:para>OriginalPath - Objects from the Microsoft release of Microsoft Dynamics NAV.</maml:para>
      <maml:para>ModifiedPath - Objects from your solution based on Microsoft Dynamics NAV, such as MySolution.</maml:para>
      <maml:para>TargetPath - Objects from the updated version of Microsoft Dynamics NAV, such as Cumulative Update 1.</maml:para>
      <maml:para>ResultPath - Text files with the result of the merge, such as MySolution upgraded to Microsoft Dynamics NAV 2017 Cumulative Update 1.</maml:para>
      <maml:para>The Merge-NAVApplicationObject cmdlet compares OriginalPath to ModifiedPath, applies as many changes as possible to TargetPath, and the resulting text files are stored in the folder that is specified by the ResultPath parameter.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Merge-NAVApplicationObject</maml:name>
        <!-- Parameter: OriginalPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="Original">
          <maml:name>OriginalPath</maml:name>
          <maml:description>
            <maml:para>Specifies the application objects that are the baseline of the file comparison.</maml:para>
            <maml:para>For example, to use all text files in the ORIGINAL folder that is a subfolder to the current folder, type .\ORIGINAL\*.txt.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: ModifiedPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2" aliases="Modified">
          <maml:name>ModifiedPath</maml:name>
          <maml:description>
            <maml:para>Specifies the application objects that you want to compare to the original version.</maml:para>
            <maml:para>For example, to compare all text files in the MODIFIED folder that is a subfolder to the current folder, type .\MODIFIED\*.txt.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: TargetPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="3" aliases="Target">
          <maml:name>TargetPath</maml:name>
          <maml:description>
            <maml:para>Specifies the application objects that the difference between the original version and the modified version must be applied to.</maml:para>
            <maml:para>For example, to use all txt files in the TARGET folder that is a subfolder to the current folder, type .\ TARGET\*.txt.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: ResultPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="4" aliases="Result">
          <maml:name>ResultPath</maml:name>
          <maml:description>
            <maml:para>Specifies the folder where the result of the merge between the two versions of application objects must be put. The folder must already exist.</maml:para>
            <maml:para>For example, to use the RESULT folder that is a subfolder to the current folder, type .\RESULT\.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: DateTimeProperty -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DateTimeProperty</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the Date and Time properties for the merged application objects. The following options are available:</maml:para>
            <maml:para>Now</maml:para>
            <maml:para>In the result of the application merge, the Date and Time properties are set to the current date and time.</maml:para>
            <maml:para>Clear</maml:para>
            <maml:para>In the result of the application merge, the Date and Time properties are empty.</maml:para>
            <maml:para>FromTarget</maml:para>
            <maml:para>In the result of the application merge, the Date and Time properties are set to the value from the target application objects. This is the default value.</maml:para>
            <maml:para>FromModified</maml:para>
            <maml:para>In the result of the application merge, the Date and Time properties are set to the value from the modified application objects.</maml:para>
            <maml:para>Possible values: Now, Clear, FromTarget, FromModified</maml:para>
          </maml:description>
          <command:parameterValue required="true">DateTimePropertyAction</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.Model.Tools.DateTimePropertyAction</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>FromTarget</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Now</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Clear</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: DisableCommentOut -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DisableCommentOut</maml:name>
          <maml:description>
            <maml:para>Specifies if the cmdlet must not comment out merged code that cannot be imported into the development environment.</maml:para>
            <maml:para>Merged code is passed through a simple parser, and any indication that it cannot be imported into the development environment results in commenting out the code. Use this parameter to disable this functionality. Code can be commented out if the merge results in unbalanced BEGIN and END statements, such as if both MODIFIED and TARGET contain an END statement.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: DocumentationConflict -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DocumentationConflict</maml:name>
          <maml:description>
            <maml:para>Specifies how conflicting lines in documentation triggers are merged. Set this parameter when you are merging objects with the same type of content in the documentation trigger, such as technical descriptions or a version list. The following options are available:</maml:para>
            <maml:para>Strict</maml:para>
            <maml:para>Conflicting lines of documentation are reported as conflicts in the same way as all other conflicts. Use this value when the objects contain technical descriptions in the documentation triggers.</maml:para>
            <maml:para>ModifiedFirst</maml:para>
            <maml:para>Conflicting lines of documentation are merged into the result file with the content from the modified object listed first. Use this value when the objects contain version history in the documentation triggers. This is the default value.</maml:para>
            <maml:para>TargetFirst</maml:para>
            <maml:para>Conflicting lines of documentation are merged into the result file with the content from the target object listed first. Use this value when the objects contain version history in the documentation triggers.</maml:para>
            <maml:para>Possible values: Strict, ModifiedFirst, TargetFirst</maml:para>
          </maml:description>
          <command:parameterValue required="true">DocumentationConflictAction</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.MetaModel.DocumentationConflictAction</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>ModifiedFirst</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Strict</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">ModifiedFirst</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">TargetFirst</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to overwrite any existing files in the Result folder.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Legacy -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="DevBaseCompatibility">
          <maml:name>Legacy</maml:name>
          <maml:description>
            <maml:para>Reduces the scope of the cmdlet. Do not set this parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: ModifiedProperty -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>ModifiedProperty</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the Modified property for the merged application objects. The following options are available:</maml:para>
            <maml:para>Yes</maml:para>
            <maml:para>In the result of the application merge, the Modified property is set to Yes.</maml:para>
            <maml:para>No</maml:para>
            <maml:para>In the result of the application merge, the Modified property is set to No.</maml:para>
            <maml:para>FromTarget</maml:para>
            <maml:para>In the result of the application merge, the Modified property is set to the value from the target application objects. This is the default value.</maml:para>
            <maml:para>FromModified</maml:para>
            <maml:para>In the result of the application merge, the Modified property is set to the value from the modified application objects.</maml:para>
            <maml:para>Possible values: Yes, No, FromTarget, FromModified</maml:para>
          </maml:description>
          <command:parameterValue required="true">ModifiedPropertyAction</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.Model.Tools.ModifiedPropertyAction</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>FromTarget</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Yes</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">No</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if the cmdlet must return a FileInfo object for each .delta file that is created by the comparison. If you do not set this parameter, the cmdlet returns a list of the files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Strict -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Strict</maml:name>
          <maml:description>
            <maml:para>Specifies if the cmdlet must report all conflicts, including non-functional conflicts such as the order in which variables or methods are listed in the text files. If this parameter is not set, these conflicts are suppressed to reduce "noise".</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: VersionListProperty -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>VersionListProperty</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to update the Version List property for the application objects. The default value is Clear. The following options are available:</maml:para>
            <maml:para>Clear</maml:para>
            <maml:para>In the result of the application merge, the Version List property is empty. This is the default value.</maml:para>
            <maml:para>FromTarget</maml:para>
            <maml:para>In the result of the application merge, the Version List property is set to the value from the target application objects.</maml:para>
            <maml:para>FromModified</maml:para>
            <maml:para>In the result of the application merge, the Version List property is set to the value from the modified application objects.</maml:para>
            <maml:para>Possible values: Clear, FromTarget, FromModified</maml:para>
          </maml:description>
          <command:parameterValue required="true">VersionListPropertyAction</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.Model.Tools.VersionListPropertyAction</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>FromTarget</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Clear</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: OriginalPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="Original">
        <maml:name>OriginalPath</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that are the baseline of the file comparison.</maml:para>
          <maml:para>For example, to use all text files in the ORIGINAL folder that is a subfolder to the current folder, type .\ORIGINAL\*.txt.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="Original">
        <maml:name>Original</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that are the baseline of the file comparison.</maml:para>
          <maml:para>For example, to use all text files in the ORIGINAL folder that is a subfolder to the current folder, type .\ORIGINAL\*.txt.</maml:para>
          <maml:para>This is an alias of the OriginalPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: ModifiedPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2" aliases="Modified">
        <maml:name>ModifiedPath</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that you want to compare to the original version.</maml:para>
          <maml:para>For example, to compare all text files in the MODIFIED folder that is a subfolder to the current folder, type .\MODIFIED\*.txt.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2" aliases="Modified">
        <maml:name>Modified</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that you want to compare to the original version.</maml:para>
          <maml:para>For example, to compare all text files in the MODIFIED folder that is a subfolder to the current folder, type .\MODIFIED\*.txt.</maml:para>
          <maml:para>This is an alias of the ModifiedPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: TargetPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="3" aliases="Target">
        <maml:name>TargetPath</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that the difference between the original version and the modified version must be applied to.</maml:para>
          <maml:para>For example, to use all txt files in the TARGET folder that is a subfolder to the current folder, type .\ TARGET\*.txt.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="3" aliases="Target">
        <maml:name>Target</maml:name>
        <maml:description>
          <maml:para>Specifies the application objects that the difference between the original version and the modified version must be applied to.</maml:para>
          <maml:para>For example, to use all txt files in the TARGET folder that is a subfolder to the current folder, type .\ TARGET\*.txt.</maml:para>
          <maml:para>This is an alias of the TargetPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: ResultPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="4" aliases="Result">
        <maml:name>ResultPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the result of the merge between the two versions of application objects must be put. The folder must already exist.</maml:para>
          <maml:para>For example, to use the RESULT folder that is a subfolder to the current folder, type .\RESULT\.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="4" aliases="Result">
        <maml:name>Result</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the result of the merge between the two versions of application objects must be put. The folder must already exist.</maml:para>
          <maml:para>For example, to use the RESULT folder that is a subfolder to the current folder, type .\RESULT\.</maml:para>
          <maml:para>This is an alias of the ResultPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if the cmdlet must return a FileInfo object for each .delta file that is created by the comparison. If you do not set this parameter, the cmdlet returns a list of the files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Legacy -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="DevBaseCompatibility">
        <maml:name>Legacy</maml:name>
        <maml:description>
          <maml:para>Reduces the scope of the cmdlet. Do not set this parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="DevBaseCompatibility">
        <maml:name>DevBaseCompatibility</maml:name>
        <maml:description>
          <maml:para>Reduces the scope of the cmdlet. Do not set this parameter.</maml:para>
          <maml:para>This is an alias of the Legacy parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: DateTimeProperty -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>DateTimeProperty</maml:name>
        <maml:description>
          <maml:para>Specifies the value of the Date and Time properties for the merged application objects. The following options are available:</maml:para>
          <maml:para>Now</maml:para>
          <maml:para>In the result of the application merge, the Date and Time properties are set to the current date and time.</maml:para>
          <maml:para>Clear</maml:para>
          <maml:para>In the result of the application merge, the Date and Time properties are empty.</maml:para>
          <maml:para>FromTarget</maml:para>
          <maml:para>In the result of the application merge, the Date and Time properties are set to the value from the target application objects. This is the default value.</maml:para>
          <maml:para>FromModified</maml:para>
          <maml:para>In the result of the application merge, the Date and Time properties are set to the value from the modified application objects.</maml:para>
          <maml:para>Possible values: Now, Clear, FromTarget, FromModified</maml:para>
        </maml:description>
        <command:parameterValue required="true">DateTimePropertyAction</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.DateTimePropertyAction</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>FromTarget</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Now</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Clear</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: ModifiedProperty -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>ModifiedProperty</maml:name>
        <maml:description>
          <maml:para>Specifies the value of the Modified property for the merged application objects. The following options are available:</maml:para>
          <maml:para>Yes</maml:para>
          <maml:para>In the result of the application merge, the Modified property is set to Yes.</maml:para>
          <maml:para>No</maml:para>
          <maml:para>In the result of the application merge, the Modified property is set to No.</maml:para>
          <maml:para>FromTarget</maml:para>
          <maml:para>In the result of the application merge, the Modified property is set to the value from the target application objects. This is the default value.</maml:para>
          <maml:para>FromModified</maml:para>
          <maml:para>In the result of the application merge, the Modified property is set to the value from the modified application objects.</maml:para>
          <maml:para>Possible values: Yes, No, FromTarget, FromModified</maml:para>
        </maml:description>
        <command:parameterValue required="true">ModifiedPropertyAction</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.ModifiedPropertyAction</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>FromTarget</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Yes</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">No</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: VersionListProperty -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>VersionListProperty</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to update the Version List property for the application objects. The default value is Clear. The following options are available:</maml:para>
          <maml:para>Clear</maml:para>
          <maml:para>In the result of the application merge, the Version List property is empty. This is the default value.</maml:para>
          <maml:para>FromTarget</maml:para>
          <maml:para>In the result of the application merge, the Version List property is set to the value from the target application objects.</maml:para>
          <maml:para>FromModified</maml:para>
          <maml:para>In the result of the application merge, the Version List property is set to the value from the modified application objects.</maml:para>
          <maml:para>Possible values: Clear, FromTarget, FromModified</maml:para>
        </maml:description>
        <command:parameterValue required="true">VersionListPropertyAction</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.VersionListPropertyAction</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>FromTarget</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Clear</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: DocumentationConflict -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>DocumentationConflict</maml:name>
        <maml:description>
          <maml:para>Specifies how conflicting lines in documentation triggers are merged. Set this parameter when you are merging objects with the same type of content in the documentation trigger, such as technical descriptions or a version list. The following options are available:</maml:para>
          <maml:para>Strict</maml:para>
          <maml:para>Conflicting lines of documentation are reported as conflicts in the same way as all other conflicts. Use this value when the objects contain technical descriptions in the documentation triggers.</maml:para>
          <maml:para>ModifiedFirst</maml:para>
          <maml:para>Conflicting lines of documentation are merged into the result file with the content from the modified object listed first. Use this value when the objects contain version history in the documentation triggers. This is the default value.</maml:para>
          <maml:para>TargetFirst</maml:para>
          <maml:para>Conflicting lines of documentation are merged into the result file with the content from the target object listed first. Use this value when the objects contain version history in the documentation triggers.</maml:para>
          <maml:para>Possible values: Strict, ModifiedFirst, TargetFirst</maml:para>
        </maml:description>
        <command:parameterValue required="true">DocumentationConflictAction</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.MetaModel.DocumentationConflictAction</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>ModifiedFirst</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Strict</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">ModifiedFirst</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">TargetFirst</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: Strict -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Strict</maml:name>
        <maml:description>
          <maml:para>Specifies if the cmdlet must report all conflicts, including non-functional conflicts such as the order in which variables or methods are listed in the text files. If this parameter is not set, these conflicts are suppressed to reduce "noise".</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to overwrite any existing files in the Result folder.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: DisableCommentOut -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>DisableCommentOut</maml:name>
        <maml:description>
          <maml:para>Specifies if the cmdlet must not comment out merged code that cannot be imported into the development environment.</maml:para>
          <maml:para>Merged code is passed through a simple parser, and any indication that it cannot be imported into the development environment results in commenting out the code. Use this parameter to disable this functionality. Code can be commented out if the merge results in unbalanced BEGIN and END statements, such as if both MODIFIED and TARGET contain an END statement.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Merge-NAVApplicationObject -OriginalPath C:\Microsoft\NAV2017\DE\RTM\*.TXT -TargetPath C:\Microsoft\NAV2017\DE\CU1\*.TXT
-ModifiedPath C:\Solution\NAV2017\DE\RTM\*.TXT -ResultPath C:\Solution\NAV2017\DE\CU1\

   Processed 14 objects:
   Inserted   0 objects
   Deleted    0 objects
   Merged     3 objects
   Identical  9 objects
   Conflict   2 objects
   Failed     0 objects
   Processed 5 changes:
   Conflict   1 changes
   % Merged   80,00</dev:code>
        <dev:remarks>
          <maml:para>This example compares the application objects from the German version of Microsoft Dynamics NAV 2017 to a customized solution that modified that version. The result of the comparison is applied to the German version of Microsoft Dynamics NAV 2017 Cumulative Update 1. The final result is stored in the folder that is specified in the -ResultPath parameter. When the merge completes, the summary of the result is shown.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 2  ----------</maml:title>
        <dev:code>Merge-NAVApplicationObject -OriginalPath C:\Solution\ORIGINAL\COD1-RTM.TXT -ModifiedPath C:\Solution\MODIFIED\My-COD1-RTM.txt
-TargetPath C:\Solution\TARGET\COD1-CU1.TXT -ResultPath C:\Solution\RESULT\My-COD1-CU1.TXT - -PassThru</dev:code>
        <dev:remarks>
          <maml:para>This example compares a text file with codeunit 1 from the original release of Microsoft Dynamics NAV to a modified version of codeunit 1. The result of the comparison is applied to a version of codeunit 1 from Cumulative Update 1. The final result is stored in the file that is specified in the -ResultPath parameter. When the merge completes, the summary of the result is shown.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 3  ----------</maml:title>
        <dev:code>Merge-NAVApplicationObject -OriginalPath C:\Solution\ORIGINAL\*.TXT -ModifiedPath C:\Solution\MODIFIED\*.txt -TargetPath
C:\Solution\TARGET\*.TXT -ResultPath C:\Solution\RESULT\ | Sort-Object ObjectType, Id | Format-Table

   ObjectType  Id  MergeResult  Original              Target                 Modified               Result                 Conflict               Error  
   ----------  --  -----------  --------              ------                 --------               ------                 --------               -----  
   Codeunit    1   Conflict     C:\Solution\ORIGIN...  C:\Solution\TARGET...  C:\Solution\MODIFI...  C:\Solution\RESULT...  C:\Solution\CONFLI...  
   Codeunit    6   Merged       C:\Solution\ORIGIN...  C:\Solution\TARGET...  C:\Solution\MODIFI...  C:\Solution\RESULT...  
   Codeunit    7   Identical    C:\Solution\ORIGIN...  C:\Solution\TARGET...  C:\Solution\MODIFI...  C:\Solution\RESULT...  
   Codeunit    8   Conflict     C:\Solution\ORIGIN...  C:\Solution\TARGET...  C:\Solution\MODIFI...  C:\Solution\RESULT...  C:\Solution\CONFLI...  
   Codeunit    9   Merged       C:\Solution\ORIGIN...  C:\Solution\TARGET...  C:\Solution\MODIFI...  C:\Solution\RESULT...  
   Page        6   Identical    C:\Solution\ORIGIN...  C:\Solution\TARGET...  C:\Solution\MODIFI...  C:\Solution\RESULT...  
   Page        7   Identical    C:\Solution\ORIGIN...  C:\Solution\TARGET...  C:\Solution\MODIFI...  C:\Solution\RESULT...  
   Table       4   Identical    C:\Solution\ORIGIN...  C:\Solution\TARGET...  C:\Solution\MODIFI...  C:\Solution\RESULT...
   Table       14  Identical    C:\Solution\ORIGIN...  C:\Solution\TARGET...  C:\Solution\MODIFI...  C:\Solution\RESULT...</dev:code>
        <dev:remarks>
          <maml:para>This example compares two sets of text files and applies the result of the comparison to a third version. The final result is stored in the folder that is specified in the -ResultPath parameter. When the merge completes, the summary of the result is shown as a table.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 4  ----------</maml:title>
        <dev:code>$myVariable = Merge-NAVApplicationObject -OriginalPath .\ORIGINAL\*.txt -TargetPath .\TARGET\*.txt -ModifiedPath
.\MODIFIED\*.txt -ResultPath .\RESULT -Force

$myVariable.Summary

$myVariable | Where-Object MergeResult -eq 'Conflict' | Select Original, Target | Format-List

   Processed 14 objects:
   Inserted   0 objects
   Deleted    0 objects
   Merged     3 objects
   Identical  9 objects
   Conflict   2 objects
   Failed     0 objects
   Processed 5 changes:   Conflict   1 changes
   % Merged   80,00

   OriginalPath : C:\Solution\ORIGINAL\COD1.TXT
   TargetPath   : C:\Solution\TARGET\COD1.TXT

   OriginalPath : C:\Solution\ORIGINAL\COD8.TXT
   TargetPath   : C:\Solution\TARGET\COD8.TXT</dev:code>
        <dev:remarks>
          <maml:para>This example compares two sets of text files and applies the result of the comparison to a third version. The final result is stored in the folder that is specified in the -ResultPath parameter. When the merge completes, the files with conflicting code are shown in a list.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 5  ----------</maml:title>
        <dev:code>Merge-NAVApplicationObject -OriginalPath .\ORIGINAL\*.txt -TargetPath .\TARGET\*.txt -ModifiedPath .\MODIFIED\*.txt -ResultPath
.\RESULT -Force -PassThru | Where-Object MergeResult -eq 'Conflict' | foreach { NOTEPAD.EXE $_.Conflict }</dev:code>
        <dev:remarks>
          <maml:para>This example compares two sets of text files and applies the result of the comparison to a third version. The final result is stored in the folder that is specified in the -ResultPath parameter. When the merge completes, the files with conflicting code are opened in Notepad.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 6  ----------</maml:title>
        <dev:code>Merge-NAVApplicationObject -OriginalPath .\ORIGINAL\pag9999.txt -ModifiedPath .\MODIFIED\pag9999.txt -TargetPath
.\TARGET\pag9999.txt -ResultPath .\RESULT\pag9999a.txt -Force -DocumentationConflict Strict; Merge-NAVApplicationObject -OriginalPath
.\ORIGINAL\pag9999.txt -ModifiedPath .\MODIFIED\pag9999.txt -TargetPath .\TARGET\pag9999.txt -ResultPath .\RESULT\pag9999a.txt -Force
-DocumentationConflict ModifiedFirst

   Processed 1 objects:
   Inserted   0 objects
   Deleted    0 objects
   Merged     0 objects
   Identical  0 objects
   Conflict   1 objects
   Failed     0 objects
   Processed 2 changes:
   Conflict   1 changes
   % Merged   50,00
   
   Processed 1 objects:
   Inserted   0 objects
   Deleted    0 objects
   Merged     1 objects
   Identical  0 objects
   Conflict   0 objects
   Failed     0 objects
   Processed 2 changes:
   Conflict   0 changes
   % Merged   100,00</dev:code>
        <dev:remarks>
          <maml:para>This example compares the documentation triggers in two versions of a page object and applies the result of the comparison to a third version. The final result is stored in the file that is specified in the -ResultPath parameter. This is then repeated. In the first command, the -DocumentationConflict parameter is set to Strict so that conflicting documentation is captured as conflicts. In the second command, the conflicting entries are both inserted into the resulting file with the content from MODIFIED listed first. When the merge completes, a summary of the merge is shown.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=398884</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Compare-NAVApplicationObject</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Update-NAVApplicationObject</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Update-NAVApplicationObject -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Update-NAVApplicationObject</command:name>
      <command:verb>Update</command:verb>
      <command:noun>NAVApplicationObject</command:noun>
      <maml:description>
        <maml:para>Applies a set of deltas to the specified application objects. The files that describe the delta are generated by the Compare-NAVApplicationObject cmdlet.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Update-NAVApplicationObject cmdlet to apply to the specified application objects. The files that describe the delta are generated by the Compare-NAVApplicationObject cmdlet. Any conflicts that are found during the update are defined in text files with the file extension .conflict.</maml:para>
      <maml:para>For example, you compare two versions of table 27: an original version and a modified version. The modified version has added a field to the table compared to the original version. In this example, the Compare-NAVApplicationObject cmdlet creates a delta file, TAB27.delta, that describes the difference that the extra field must be inserted into the table. Optionally, you can use the Set-NAVApplicationObjectProperty cmdlet to change the version or other properties. Then, you use Update-NAVApplicationObject cmdlet to apply the delta to target files.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Update-NAVApplicationObject</maml:name>
        <!-- Parameter: TargetPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="Target">
          <maml:name>TargetPath</maml:name>
          <maml:description>
            <maml:para>Specifies the folder where the application objects are stored that you want to update with the delta.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: DeltaPath -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2" aliases="PSPath,Delta">
          <maml:name>DeltaPath</maml:name>
          <maml:description>
            <maml:para>Specifies the folder where the result of the comparison between two versions of application objects are stored.</maml:para>
            <maml:para>The files in the folder must be .delta files that have been generated by the Compare-NAVApplicationObject cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: ResultPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="3" aliases="Result">
          <maml:name>ResultPath</maml:name>
          <maml:description>
            <maml:para>Specifies the folder where the updated files must be stored. The folder must already exist.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: DateTimeProperty -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DateTimeProperty</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the Date and Time properties for the updated application objects. The default value is Now. The following options are available:</maml:para>
            <maml:para>Now</maml:para>
            <maml:para>In the result of the update, the Date and Time properties are set to the current date and time.</maml:para>
            <maml:para>Clear</maml:para>
            <maml:para>In the result of the update, the Date and Time properties are empty.</maml:para>
            <maml:para>FromTarget</maml:para>
            <maml:para>In the result of the application merge, the Date and Time properties are set to the value from the target application objects. This is the default value.</maml:para>
            <maml:para>FromDelta</maml:para>
            <maml:para>In the result of the update, the Date and Time properties are set to the value from the delta files.</maml:para>
            <maml:para>Possible values: Now, Clear, FromTarget, FromModified</maml:para>
          </maml:description>
          <command:parameterValue required="true">DateTimePropertyAction</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.Model.Tools.DateTimePropertyAction</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>FromTarget</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Now</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Clear</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: DisableCommentOut -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DisableCommentOut</maml:name>
          <maml:description>
            <maml:para>Specifies if the cmdlet must not comment out merged code that cannot be imported into the development environment.</maml:para>
            <maml:para>Merged code is passed through a simple parser, and any indication that it cannot be imported into the development environment results in commenting out the code. Use this parameter to disable this functionality. Code can be commented out if the merge results in unbalanced BEGIN and END statements, such as if both MODIFIED and TARGET contain an END statement.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: DocumentationConflict -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DocumentationConflict</maml:name>
          <maml:description>
            <maml:para>Specifies how conflicting lines in documentation triggers are merged. Set this parameter when you are merging objects with the same type of content in the documentation trigger, such as technical descriptions or a version list. The default value is ModifiedFirst. The following options are available:</maml:para>
            <maml:para>Strict</maml:para>
            <maml:para>Conflicting lines of documentation are reported as conflicts in the same way as all other conflicts. Use this value when the objects contain technical descriptions in the documentation triggers.</maml:para>
            <maml:para>ModifiedFirst</maml:para>
            <maml:para>Conflicting lines of documentation are merged into the result file with the content from the modified object listed first. Use this value when the objects contain version history in the documentation triggers. This is the default value.</maml:para>
            <maml:para>TargetFirst</maml:para>
            <maml:para>Conflicting lines of documentation are merged into the result file with the content from the target object listed first. Use this value when the objects contain version history in the documentation triggers.</maml:para>
            <maml:para>Possible values: Strict, ModifiedFirst, TargetFirst</maml:para>
          </maml:description>
          <command:parameterValue required="true">DocumentationConflictAction</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.MetaModel.DocumentationConflictAction</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>ModifiedFirst</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Strict</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">ModifiedFirst</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">TargetFirst</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to overwrite any existing files in the Result folder.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Legacy -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="DevBaseCompatibility">
          <maml:name>Legacy</maml:name>
          <maml:description>
            <maml:para>Reduces the scope of the cmdlet. Do not set this parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: ModifiedProperty -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>ModifiedProperty</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the Modified property for the merged application objects. The following options are available:</maml:para>
            <maml:para>Yes</maml:para>
            <maml:para>In the result of the update, the Modified property is set to Yes.</maml:para>
            <maml:para>No</maml:para>
            <maml:para>In the result of the update, the Modified property is set to No.</maml:para>
            <maml:para>FromTarget</maml:para>
            <maml:para>In the result of the update, the Modified property is set to the value from the target application objects. This is the default value.</maml:para>
            <maml:para>FromDelta</maml:para>
            <maml:para>In the result of the update, the Modified property is set to the value from the delta files.</maml:para>
            <maml:para>Possible values: Yes, No, FromTarget, FromModified</maml:para>
          </maml:description>
          <command:parameterValue required="true">ModifiedPropertyAction</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.Model.Tools.ModifiedPropertyAction</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>FromTarget</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Yes</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">No</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if the cmdlet must return a FileInfo object for each merge operation. If you do not set this parameter, the cmdlet returns a list of the files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Strict -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Strict</maml:name>
          <maml:description>
            <maml:para>Specifies if the cmdlet must report all conflicts, including non-functional conflicts such as the order in which variables or methods are listed in the text files. If this parameter is not set, these conflicts are suppressed to reduce "noise".</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: VersionListProperty -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>VersionListProperty</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to update the Version List property for the application objects. The following options are available:</maml:para>
            <maml:para>Clear</maml:para>
            <maml:para>In the result of the update, the Version List property is empty. This is the default value.</maml:para>
            <maml:para>FromTarget</maml:para>
            <maml:para>In the result of the update, the Version List property is set to the value from the target application objects.</maml:para>
            <maml:para>FromModified</maml:para>
            <maml:para>In the result of the update, the Version List property is set to the value from the modified application objects.</maml:para>
            <maml:para>Possible values: Clear, FromTarget, FromModified</maml:para>
          </maml:description>
          <command:parameterValue required="true">VersionListPropertyAction</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.Model.Tools.VersionListPropertyAction</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>FromTarget</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Clear</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: TargetPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="Target">
        <maml:name>TargetPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the application objects are stored that you want to update with the delta.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="Target">
        <maml:name>Target</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the application objects are stored that you want to update with the delta.</maml:para>
          <maml:para>This is an alias of the TargetPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: DeltaPath -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2" aliases="PSPath,Delta">
        <maml:name>DeltaPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the result of the comparison between two versions of application objects are stored.</maml:para>
          <maml:para>The files in the folder must be .delta files that have been generated by the Compare-NAVApplicationObject cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2" aliases="PSPath,Delta">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the result of the comparison between two versions of application objects are stored.</maml:para>
          <maml:para>The files in the folder must be .delta files that have been generated by the Compare-NAVApplicationObject cmdlet.</maml:para>
          <maml:para>This is an alias of the DeltaPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2" aliases="PSPath,Delta">
        <maml:name>Delta</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the result of the comparison between two versions of application objects are stored.</maml:para>
          <maml:para>The files in the folder must be .delta files that have been generated by the Compare-NAVApplicationObject cmdlet.</maml:para>
          <maml:para>This is an alias of the DeltaPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: ResultPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="3" aliases="Result">
        <maml:name>ResultPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the updated files must be stored. The folder must already exist.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="3" aliases="Result">
        <maml:name>Result</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the updated files must be stored. The folder must already exist.</maml:para>
          <maml:para>This is an alias of the ResultPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if the cmdlet must return a FileInfo object for each merge operation. If you do not set this parameter, the cmdlet returns a list of the files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Legacy -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="DevBaseCompatibility">
        <maml:name>Legacy</maml:name>
        <maml:description>
          <maml:para>Reduces the scope of the cmdlet. Do not set this parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="DevBaseCompatibility">
        <maml:name>DevBaseCompatibility</maml:name>
        <maml:description>
          <maml:para>Reduces the scope of the cmdlet. Do not set this parameter.</maml:para>
          <maml:para>This is an alias of the Legacy parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: DateTimeProperty -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>DateTimeProperty</maml:name>
        <maml:description>
          <maml:para>Specifies the value of the Date and Time properties for the updated application objects. The default value is Now. The following options are available:</maml:para>
          <maml:para>Now</maml:para>
          <maml:para>In the result of the update, the Date and Time properties are set to the current date and time.</maml:para>
          <maml:para>Clear</maml:para>
          <maml:para>In the result of the update, the Date and Time properties are empty.</maml:para>
          <maml:para>FromTarget</maml:para>
          <maml:para>In the result of the application merge, the Date and Time properties are set to the value from the target application objects. This is the default value.</maml:para>
          <maml:para>FromDelta</maml:para>
          <maml:para>In the result of the update, the Date and Time properties are set to the value from the delta files.</maml:para>
          <maml:para>Possible values: Now, Clear, FromTarget, FromModified</maml:para>
        </maml:description>
        <command:parameterValue required="true">DateTimePropertyAction</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.DateTimePropertyAction</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>FromTarget</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Now</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Clear</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: ModifiedProperty -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>ModifiedProperty</maml:name>
        <maml:description>
          <maml:para>Specifies the value of the Modified property for the merged application objects. The following options are available:</maml:para>
          <maml:para>Yes</maml:para>
          <maml:para>In the result of the update, the Modified property is set to Yes.</maml:para>
          <maml:para>No</maml:para>
          <maml:para>In the result of the update, the Modified property is set to No.</maml:para>
          <maml:para>FromTarget</maml:para>
          <maml:para>In the result of the update, the Modified property is set to the value from the target application objects. This is the default value.</maml:para>
          <maml:para>FromDelta</maml:para>
          <maml:para>In the result of the update, the Modified property is set to the value from the delta files.</maml:para>
          <maml:para>Possible values: Yes, No, FromTarget, FromModified</maml:para>
        </maml:description>
        <command:parameterValue required="true">ModifiedPropertyAction</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.ModifiedPropertyAction</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>FromTarget</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Yes</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">No</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: VersionListProperty -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>VersionListProperty</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to update the Version List property for the application objects. The following options are available:</maml:para>
          <maml:para>Clear</maml:para>
          <maml:para>In the result of the update, the Version List property is empty. This is the default value.</maml:para>
          <maml:para>FromTarget</maml:para>
          <maml:para>In the result of the update, the Version List property is set to the value from the target application objects.</maml:para>
          <maml:para>FromModified</maml:para>
          <maml:para>In the result of the update, the Version List property is set to the value from the modified application objects.</maml:para>
          <maml:para>Possible values: Clear, FromTarget, FromModified</maml:para>
        </maml:description>
        <command:parameterValue required="true">VersionListPropertyAction</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.VersionListPropertyAction</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>FromTarget</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Clear</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromTarget</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">FromModified</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: DocumentationConflict -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>DocumentationConflict</maml:name>
        <maml:description>
          <maml:para>Specifies how conflicting lines in documentation triggers are merged. Set this parameter when you are merging objects with the same type of content in the documentation trigger, such as technical descriptions or a version list. The default value is ModifiedFirst. The following options are available:</maml:para>
          <maml:para>Strict</maml:para>
          <maml:para>Conflicting lines of documentation are reported as conflicts in the same way as all other conflicts. Use this value when the objects contain technical descriptions in the documentation triggers.</maml:para>
          <maml:para>ModifiedFirst</maml:para>
          <maml:para>Conflicting lines of documentation are merged into the result file with the content from the modified object listed first. Use this value when the objects contain version history in the documentation triggers. This is the default value.</maml:para>
          <maml:para>TargetFirst</maml:para>
          <maml:para>Conflicting lines of documentation are merged into the result file with the content from the target object listed first. Use this value when the objects contain version history in the documentation triggers.</maml:para>
          <maml:para>Possible values: Strict, ModifiedFirst, TargetFirst</maml:para>
        </maml:description>
        <command:parameterValue required="true">DocumentationConflictAction</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.MetaModel.DocumentationConflictAction</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>ModifiedFirst</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Strict</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">ModifiedFirst</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">TargetFirst</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: Strict -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Strict</maml:name>
        <maml:description>
          <maml:para>Specifies if the cmdlet must report all conflicts, including non-functional conflicts such as the order in which variables or methods are listed in the text files. If this parameter is not set, these conflicts are suppressed to reduce "noise".</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to overwrite any existing files in the Result folder.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: DisableCommentOut -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>DisableCommentOut</maml:name>
        <maml:description>
          <maml:para>Specifies if the cmdlet must not comment out merged code that cannot be imported into the development environment.</maml:para>
          <maml:para>Merged code is passed through a simple parser, and any indication that it cannot be imported into the development environment results in commenting out the code. Use this parameter to disable this functionality. Code can be commented out if the merge results in unbalanced BEGIN and END statements, such as if both MODIFIED and TARGET contain an END statement.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By property name: DeltaPath</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Update-NAVApplicationObject -TargetPath C:\Solution\TARGET\*.txt -DeltaPath C:\Solution\DELTA\*.txt -ResultPath
C:\Solution\RESULT\</dev:code>
        <dev:remarks>
          <maml:para>This example updates the text files in the TARGET folder with the delta files in the DELTA folder. The resulting text files are stored in the RESULT folder. When the update completes, a summary is shown.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=398886</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Compare-NAVApplicationObject</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Join-NAVApplicationObjectFile -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Join-NAVApplicationObjectFile</command:name>
      <command:verb>Join</command:verb>
      <command:noun>NAVApplicationObjectFile</command:noun>
      <maml:description>
        <maml:para>Combines multiple application object files into one text file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Join-NAVApplicationObjectFile to combine the application objects in the specified folder into a single text file.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Join-NAVApplicationObjectFile</maml:name>
        <!-- Parameter: Source -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="Result,PSPath">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the folder that stores the text files with application objects that you want to merge into a single text files with all application objects.</maml:para>
            <maml:para>For example, to use all text files in the SOURCE folder that is a subfolder to the current folder, type .\SOURCE\*.txt.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Destination -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the name and location of the generated text file.</maml:para>
            <maml:para>For example, to generate the MyObjects.txt file in the current folder, type .\MyObjects.txt.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to overwrite any existing files in the Result folder.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Source -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="Result,PSPath">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the folder that stores the text files with application objects that you want to merge into a single text files with all application objects.</maml:para>
          <maml:para>For example, to use all text files in the SOURCE folder that is a subfolder to the current folder, type .\SOURCE\*.txt.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="Result,PSPath">
        <maml:name>Result</maml:name>
        <maml:description>
          <maml:para>Specifies the folder that stores the text files with application objects that you want to merge into a single text files with all application objects.</maml:para>
          <maml:para>For example, to use all text files in the SOURCE folder that is a subfolder to the current folder, type .\SOURCE\*.txt.</maml:para>
          <maml:para>This is an alias of the Source parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="Result,PSPath">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder that stores the text files with application objects that you want to merge into a single text files with all application objects.</maml:para>
          <maml:para>For example, to use all text files in the SOURCE folder that is a subfolder to the current folder, type .\SOURCE\*.txt.</maml:para>
          <maml:para>This is an alias of the Source parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Destination -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the name and location of the generated text file.</maml:para>
          <maml:para>For example, to generate the MyObjects.txt file in the current folder, type .\MyObjects.txt.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to overwrite any existing files in the Result folder.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: Source</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Join-NAVApplicationObjectFile -Source C:\Solution\TXT\COD*.txt -Destination C:\Solution\all-codeunits.txt</dev:code>
        <dev:remarks>
          <maml:para>This example merges a list of files with application objects, such as COD1.TXT and COD2.TXT, into a single, larger file, all-codeunits.txt. When the merge completes, the status is shown with information about the file that was created.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=398883</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Join-NAVApplicationObjectLanguageFile</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Merge-NAVApplicationObject</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-NAVApplicationObjectFile</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Split-NAVApplicationObjectFile -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Split-NAVApplicationObjectFile</command:name>
      <command:verb>Split</command:verb>
      <command:noun>NAVApplicationObjectFile</command:noun>
      <maml:description>
        <maml:para>Splits a text file that contains two or more application objects into separate text files for each application object.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Split-NAVApplicationObjectFile cmdlet to split a text file that contains two or more application objects into separate text files for each application object. For example, if you have exported tables 18 and 27 to a single text file such as MySolution.txt, you can use the cmdlet to create two new text files, TAB18.txt and TAB27.txt.</maml:para>
      <maml:para>The Split-NAVApplicationObjectFile cmdlet can copy each application object to a new file, or it can recreate the object in the new file. The default setting is to recreate the object, but you can change this by setting the PreserveFormatting parameter.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Split-NAVApplicationObjectFile</maml:name>
        <!-- Parameter: Source -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the file that contains multiple application objects that you want to split into separate text files for each application object.</maml:para>
            <maml:para>For example, to specify the MySolution.txt files in the SOURCE folder that is a subfolder to the current folder, type .\SOURCE\MySolution.txt.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Destination -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the folder where the resulting text files must be put.</maml:para>
            <maml:para>For example, to use the TXT folder that is a subfolder to the current folder, type .\TXT\.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Forces the cmdlet to overwrite any existing files in the Destination folder.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if the cmdlet must return a FileInfo object for each text file that is created. If you do not set this parameter, the cmdlet returns a list of the files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: PreserveFormatting -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PreserveFormatting</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to keep the structure of the application objects as shown in the source text file. This copies the textual descriptions of the objects line by line so that the description of the object is identical in the source file and destination file.</maml:para>
            <maml:para>If you do not set this parameter, each application object is identified, translated from text to metadata, and then written to the destination text file. As a result, the object in the generated text file can look different from the source file by listing properties in a different order, or by having removed empty lines, for example.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Source -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the file that contains multiple application objects that you want to split into separate text files for each application object.</maml:para>
          <maml:para>For example, to specify the MySolution.txt files in the SOURCE folder that is a subfolder to the current folder, type .\SOURCE\MySolution.txt.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the file that contains multiple application objects that you want to split into separate text files for each application object.</maml:para>
          <maml:para>For example, to specify the MySolution.txt files in the SOURCE folder that is a subfolder to the current folder, type .\SOURCE\MySolution.txt.</maml:para>
          <maml:para>This is an alias of the Source parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Destination -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the resulting text files must be put.</maml:para>
          <maml:para>For example, to use the TXT folder that is a subfolder to the current folder, type .\TXT\.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if the cmdlet must return a FileInfo object for each text file that is created. If you do not set this parameter, the cmdlet returns a list of the files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: PreserveFormatting -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PreserveFormatting</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to keep the structure of the application objects as shown in the source text file. This copies the textual descriptions of the objects line by line so that the description of the object is identical in the source file and destination file.</maml:para>
          <maml:para>If you do not set this parameter, each application object is identified, translated from text to metadata, and then written to the destination text file. As a result, the object in the generated text file can look different from the source file by listing properties in a different order, or by having removed empty lines, for example.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Forces the cmdlet to overwrite any existing files in the Destination folder.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: Source</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Split-NAVApplicationObjectFile -Source C:\Solution\All.txt -Destination C:\Solution\TXT\</dev:code>
        <dev:remarks>
          <maml:para>This example creates separate text files for each application object in the All.txt file, such as TAB18.TXT and TAB27.TXT.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 2  ----------</maml:title>
        <dev:code>Split-NAVApplicationObjectFile -Source C:\Solution\All.txt -Destination C:\Solution\TXT\ -PreserveFormatting</dev:code>
        <dev:remarks>
          <maml:para>This example creates separate text files for each application object in the All.txt file, such as TAB18.TXT and TAB27.TXT. By setting the PreserveFormatting parameter, each object is an exact copy, including extra line breaks or potential syntax errors. This makes it easier to compare files afterwards, for example.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=398885</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Join-NAVApplicationObjectFile</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-NAVApplicationObjectLanguageFile</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Export-NAVApplicationObjectLanguage -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Export-NAVApplicationObjectLanguage</command:name>
      <command:verb>Export</command:verb>
      <command:noun>NAVApplicationObjectLanguage</command:noun>
      <maml:description>
        <maml:para>Exports captions from the specified text files with Business Central application objects. The captions are exported to text files.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Export-NAVApplicationObjectLanguage cmdlet to export multilanguage captions from text files that contain Business Central application objects. The resulting text files are similar to the multilanguage files that you can export in the Development Environment. If your source files contain more than one language, you can choose to export one language, multiple languages, or all languages.</maml:para>
      <maml:para>For example, you export 4 Business Central objects to a text file, and they have captions in English (US), German, and French. You then use the Export-NAVApplicationObjectLanguage cmdlet to export the German and French captions. The cmdlet creates a language-specific text file for each object, such as TAB18-DEU.txt and TAB18-FRA.txt. Alternatively, you can choose to create a single language-specific text file with all captions for all objects. Or you can choose to store the languages in memory so that you can pipe the result to another Windows PowerShell cmdlet such as Import-NAVApplicationObjectLanguage.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Export-NAVApplicationObjectLanguage</maml:name>
        <!-- Parameter: Source -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder that contains Business Central application objects. The cmdlet does not modify these text files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Destination -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder where the result of the export must be put. If you do not set this parameter, captions are stored in memory and can be piped to another Windows PowerShell cmdlet such as Import-NAVApplicationObjectLanguage.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: LanguageId -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>LanguageId</maml:name>
          <maml:description>
            <maml:para>Specifies the language or list of languages that you want to export, such as "DEU". If you do not set this parameter, all available languages are exported.</maml:para>
            <maml:para>If the parameter is omitted, the output contains a line for every text value in the object. If you specify a list of language IDs, the output contains one line for each language that has been added for each object. If a language is not present on a property that is translated into another language, the entry for the missing language is empty.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: DevelopmentLanguageId -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DevelopmentLanguageId</maml:name>
          <maml:description>
            <maml:para>Specifies you want to generate captions in the base development language if captions are missing. Missing captions are generated based on the object name in the language that is specified as the base development language. The default value is ENU because the base development language in Business Central is English (US).</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Encoding -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>Specifies the encoding for the exported file. Valid values are Unicode, UTF7, UTF8, ASCII, UTF32, BigEndianUnicode, Default, and OEM. The default value is OEM, which is the default encoding for the Development Environment.</maml:para>
            <maml:para>Possible values: OEM, Unicode, UTF7, UTF8, UTF32, ASCII, BigEndianUnicode, Default</maml:para>
          </maml:description>
          <command:parameterValue required="true">FileEncoding</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.Model.Tools.FileEncoding</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>OEM</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">OEM</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Unicode</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">UTF7</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">UTF8</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">UTF32</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">ASCII</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">BigEndianUnicode</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Default</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Source -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains Business Central application objects. The cmdlet does not modify these text files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains Business Central application objects. The cmdlet does not modify these text files.</maml:para>
          <maml:para>This is an alias of the Source parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Destination -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder where the result of the export must be put. If you do not set this parameter, captions are stored in memory and can be piped to another Windows PowerShell cmdlet such as Import-NAVApplicationObjectLanguage.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: LanguageId -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
        <maml:name>LanguageId</maml:name>
        <maml:description>
          <maml:para>Specifies the language or list of languages that you want to export, such as "DEU". If you do not set this parameter, all available languages are exported.</maml:para>
          <maml:para>If the parameter is omitted, the output contains a line for every text value in the object. If you specify a list of language IDs, the output contains one line for each language that has been added for each object. If a language is not present on a property that is translated into another language, the entry for the missing language is empty.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Encoding -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Encoding</maml:name>
        <maml:description>
          <maml:para>Specifies the encoding for the exported file. Valid values are Unicode, UTF7, UTF8, ASCII, UTF32, BigEndianUnicode, Default, and OEM. The default value is OEM, which is the default encoding for the Development Environment.</maml:para>
          <maml:para>Possible values: OEM, Unicode, UTF7, UTF8, UTF32, ASCII, BigEndianUnicode, Default</maml:para>
        </maml:description>
        <command:parameterValue required="true">FileEncoding</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.FileEncoding</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>OEM</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">OEM</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Unicode</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">UTF7</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">UTF8</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">UTF32</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">ASCII</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">BigEndianUnicode</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Default</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: DevelopmentLanguageId -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>DevelopmentLanguageId</maml:name>
        <maml:description>
          <maml:para>Specifies you want to generate captions in the base development language if captions are missing. Missing captions are generated based on the object name in the language that is specified as the base development language. The default value is ENU because the base development language in Business Central is English (US).</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: Source</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Export-NAVApplicationObjectLanguage -Source .\ORIGINAL\ -LanguageId "DEU","FRA" -Destination .\RESULT\</dev:code>
        <dev:remarks>
          <maml:para>This example exports the DEU and FRA languages from the Business Central application objects that are in the ORIGINAL folder. The result of the export is a separate text file for each object and for each language, such as TAB18-DEU.txt and TAB18-FRA.txt.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 2  ----------</maml:title>
        <dev:code>Export-NAVApplicationObjectLanguage -Source .\ORIGINAL\ -LanguageId "DEU","FRA" -Destination .\RESULT\languages.txt</dev:code>
        <dev:remarks>
          <maml:para>This example exports the DEU and FRA languages from the Business Central application objects that are in the ORIGINAL folder. The result of the export is a single text file in the RESULT folder that lists all strings for all objects in one language first and then the other language.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 3  ----------</maml:title>
        <dev:code>Export-NAVApplicationObjectLanguage -Source .\ORIGINAL\ -LanguageId "DEU","FRA" -Destination .\RESULT\languages.txt;
Get-Content .\RESULT\languages.txt | Sort-Object | Set-Content .\RESULT\languages-sorted.txt</dev:code>
        <dev:remarks>
          <maml:para>This example is similar to example 2 and exports the DEU and FRA languages to a single text file in the RESULT folder that lists all strings for all objects in one language first and then the other language. The exported captions are read into memory, sorted by object ID so that the DEU and FRA captions for the same object are listed together. This new result is saved to a new file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 4  ----------</maml:title>
        <dev:code>foreach ($lang in ('DEU', 'FRA')) { Export-NAVApplicationObjectLanguage -Source ORIGINAL\*.txt -LanguageId $lang -Destination
.\RESULT\ALL-$lang.txt }</dev:code>
        <dev:remarks>
          <maml:para>When used in a script, this code snippet exports the DEU and FRA languages from the Business Central application objects that are in the SOURCE folder. The result of the export is two text files in the RESULT folder that each lists all strings for all objects in that language. In this example, the resulting text files are ALL-DEU.txt and ALL-FRA.txt.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=400539</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Import-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Import-NAVApplicationObjectLanguage -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Import-NAVApplicationObjectLanguage</command:name>
      <command:verb>Import</command:verb>
      <command:noun>NAVApplicationObjectLanguage</command:noun>
      <maml:description>
        <maml:para>Imports strings in the specified language into text files that contain Business Central application objects.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Import-NAVApplicationObjectLanguage cmdlet to import a language into the Business Central application objects. For example, if you have exported multilanguage files in the Development Environment, or by using the Export-NAVApplicationObjectLanguage cmdlet, you can import the strings into another version of the same application objects.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Import-NAVApplicationObjectLanguage</maml:name>
        <!-- Parameter: Source -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder that contains the Business Central application objects that you want to import a language into. The cmdlet does not modify these text files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: LanguagePath -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="2" aliases="PSPath,Language">
          <maml:name>LanguagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or files or folder with text files that contain the language-specific strings. The text files must have been exported from Business Central in the Development Environment or by using the Export-NAVApplicationObjectLanguage cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Destination -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="3">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder where you want the result of the import to be put.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: LanguageId -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="4">
          <maml:name>LanguageId</maml:name>
          <maml:description>
            <maml:para>Specifies the language or list of languages that you want to import, such as "DEU". If you do not set this parameter, all available languages are imported.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Encoding -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Encoding</maml:name>
          <maml:description>
            <maml:para>Specifies the encoding for the exported file. Valid values are Unicode, UTF7, UTF8, ASCII, UTF32, BigEndianUnicode, Default, and OEM. The default value is OEM, which is the default encoding for the Development Environment.</maml:para>
            <maml:para>Possible values: OEM, Unicode, UTF7, UTF8, UTF32, ASCII, BigEndianUnicode, Default</maml:para>
          </maml:description>
          <command:parameterValue required="true">FileEncoding</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.Model.Tools.FileEncoding</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>OEM</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">OEM</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Unicode</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">UTF7</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">UTF8</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">UTF32</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">ASCII</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">BigEndianUnicode</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Default</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Source -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains the Business Central application objects that you want to import a language into. The cmdlet does not modify these text files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: LanguagePath -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="2" aliases="PSPath,Language">
        <maml:name>LanguagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or files or folder with text files that contain the language-specific strings. The text files must have been exported from Business Central in the Development Environment or by using the Export-NAVApplicationObjectLanguage cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="2" aliases="PSPath,Language">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or files or folder with text files that contain the language-specific strings. The text files must have been exported from Business Central in the Development Environment or by using the Export-NAVApplicationObjectLanguage cmdlet.</maml:para>
          <maml:para>This is an alias of the LanguagePath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="2" aliases="PSPath,Language">
        <maml:name>Language</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or files or folder with text files that contain the language-specific strings. The text files must have been exported from Business Central in the Development Environment or by using the Export-NAVApplicationObjectLanguage cmdlet.</maml:para>
          <maml:para>This is an alias of the LanguagePath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Destination -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="3">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder where you want the result of the import to be put.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: LanguageId -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="4">
        <maml:name>LanguageId</maml:name>
        <maml:description>
          <maml:para>Specifies the language or list of languages that you want to import, such as "DEU". If you do not set this parameter, all available languages are imported.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Encoding -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Encoding</maml:name>
        <maml:description>
          <maml:para>Specifies the encoding for the exported file. Valid values are Unicode, UTF7, UTF8, ASCII, UTF32, BigEndianUnicode, Default, and OEM. The default value is OEM, which is the default encoding for the Development Environment.</maml:para>
          <maml:para>Possible values: OEM, Unicode, UTF7, UTF8, UTF32, ASCII, BigEndianUnicode, Default</maml:para>
        </maml:description>
        <command:parameterValue required="true">FileEncoding</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.FileEncoding</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>OEM</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">OEM</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Unicode</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">UTF7</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">UTF8</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">UTF32</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">ASCII</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">BigEndianUnicode</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Default</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: Source</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>LanguagePath</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Import-NAVApplicationObjectLanguage -Source .\TAB14.TXT -LanguageId "ESP" -LanguagePath .\ALL-ESP.TXT -Destination .\RESULT\</dev:code>
        <dev:remarks>
          <maml:para>This example imports the ESP language into the Business Central application object that is specified in the -Source parameter, TAB14.txt. The strings are imported from the text files in the ALL-ESP.txt file, and the result of the command is a text file in the RESULT folder, TAB14.txt, that includes captions in Spanish.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=400542</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Remove-NAVApplicationObjectLanguage -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Remove-NAVApplicationObjectLanguage</command:name>
      <command:verb>Remove</command:verb>
      <command:noun>NAVApplicationObjectLanguage</command:noun>
      <maml:description>
        <maml:para>Deletes captions in the specified language from Business Central application objects.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Remove-NAVApplicationObjectLanguage cmdlet to remove a language from a set of Business Central application objects.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Remove-NAVApplicationObjectLanguage</maml:name>
        <!-- Parameter: Source -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder that contains the Business Central application objects that you want to remove a language from. The cmdlet does not modify these text files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Destination -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder where you want the updated objects to be put.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: LanguageId -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>LanguageId</maml:name>
          <maml:description>
            <maml:para>Specifies the language or list of languages that you want to remove, such as "DEU". If you do not set this parameter, all available languages are removed except the language that is specified in the DevelopmentLanguageId parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: DevelopmentLanguageId -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DevelopmentLanguageId</maml:name>
          <maml:description>
            <maml:para>Specifies the base development language that must always be available for all objects. The default value is ENU. If you do not specify any language in the LanguageId parameter, all available languages are removed from the objects except the development language.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: RemoveRedundant -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>RemoveRedundant</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to remove captions that are the same as the name of the element.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Source -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains the Business Central application objects that you want to remove a language from. The cmdlet does not modify these text files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains the Business Central application objects that you want to remove a language from. The cmdlet does not modify these text files.</maml:para>
          <maml:para>This is an alias of the Source parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Destination -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder where you want the updated objects to be put.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: LanguageId -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
        <maml:name>LanguageId</maml:name>
        <maml:description>
          <maml:para>Specifies the language or list of languages that you want to remove, such as "DEU". If you do not set this parameter, all available languages are removed except the language that is specified in the DevelopmentLanguageId parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: DevelopmentLanguageId -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>DevelopmentLanguageId</maml:name>
        <maml:description>
          <maml:para>Specifies the base development language that must always be available for all objects. The default value is ENU. If you do not specify any language in the LanguageId parameter, all available languages are removed from the objects except the development language.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: RemoveRedundant -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>RemoveRedundant</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to remove captions that are the same as the name of the element.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: Source</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Remove-NAVApplicationObjectLanguage -Source TAB14.TXT, PAG9.TXT -Destination .\RESULT</dev:code>
        <dev:remarks>
          <maml:para>This example removes all languages from the Business Central application objects that are specified in the -Source parameter, TAB14.txt and PAG9.txt. The updated text files are put in the RESULT folder.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=400543</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Import-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Test-NAVApplicationObjectLanguage -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Test-NAVApplicationObjectLanguage</command:name>
      <command:verb>Test</command:verb>
      <command:noun>NAVApplicationObjectLanguage</command:noun>
      <maml:description>
        <maml:para>Tests captions in Business Central application objects to test to validate if they have translated strings for the specified languages.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Test-NAVApplicationObjectLanguage cmdlet to validate captions in Business Central application objects. The cmdlet tests all multilanguage strings to verify if the objects have translated strings for the specified languages.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Test-NAVApplicationObjectLanguage</maml:name>
        <!-- Parameter: Source -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder that contains the Business Central application objects that you want to test. The cmdlet does not modify these text files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: LanguageId -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>LanguageId</maml:name>
          <maml:description>
            <maml:para>Specifies the language or list of languages that you want to test for, such as "DEU". If you do not set this parameter, all available languages are tested.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to return a collection of objects that describe the missing translations.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Source -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains the Business Central application objects that you want to test. The cmdlet does not modify these text files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains the Business Central application objects that you want to test. The cmdlet does not modify these text files.</maml:para>
          <maml:para>This is an alias of the Source parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: LanguageId -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
        <maml:name>LanguageId</maml:name>
        <maml:description>
          <maml:para>Specifies the language or list of languages that you want to test for, such as "DEU". If you do not set this parameter, all available languages are tested.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to return a collection of objects that describe the missing translations.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: Source</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Test-NAVApplicationObjectLanguage -Source TAB14.TXT -LanguageId ESP</dev:code>
        <dev:remarks>
          <maml:para>This example tests the application object in the TAB14.txt file for captions in Spanish. If nothing is returned, the object has captions in ESP. If one or more captions in ESP are missing, a technical error is shown.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 2  ----------</maml:title>
        <dev:code>Test-NAVApplicationObjectLanguage -Source .\RESULT\*.TXT -LanguageId DAN</dev:code>
        <dev:remarks>
          <maml:para>This example tests the application objects in the RESULT folder for captions in Danish. If nothing is returned, the object has captions in DAN. If one or more captions in DAN are missing, a technical error is shown.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 3  ----------</maml:title>
        <dev:code>try { Test-NAVApplicationObjectLanguage -Source TAB14.TXT -LanguageId ESP -ErrorAction Stop } catch { Write-Host "One or more
translations are missing for the ESP language." -ForegroundColor Yellow }</dev:code>
        <dev:remarks>
          <maml:para>This example tests the application object in the TAB14.txt file for captions in Spanish. If nothing is returned, the object has captions in ESP. If one or more captions in ESP are missing, an error is shown with the text that you specified.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=400544</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Import-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Join-NAVApplicationObjectLanguageFile -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Join-NAVApplicationObjectLanguageFile</command:name>
      <command:verb>Join</command:verb>
      <command:noun>NAVApplicationObjectLanguageFile</command:noun>
      <maml:description>
        <maml:para>Combines multiple text files with captions for Business Central application objects into one text file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Join-NAVApplicationObjectLanguageFile cmdlet to combine multiple text files with captions for Business Central application objects into one text file.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Join-NAVApplicationObjectLanguageFile</maml:name>
        <!-- Parameter: Source -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder that contains the text files that you want to combine. The cmdlet does not modify these text files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Destination -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder where you want the generated files to be put. Optionally, do not set this parameter so that you can pipe the result to another Windows PowerShell cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Source -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains the text files that you want to combine. The cmdlet does not modify these text files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains the text files that you want to combine. The cmdlet does not modify these text files.</maml:para>
          <maml:para>This is an alias of the Source parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Destination -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder where you want the generated files to be put. Optionally, do not set this parameter so that you can pipe the result to another Windows PowerShell cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: Source</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Join-NAVApplicationObjectLanguageFile -Source "*-ESP.TXT" -Destination .\RESULT\All-ESP.txt</dev:code>
        <dev:remarks>
          <maml:para>This example combines all the text files with Spanish translations into a single text file. In this example, you have previously exported Spanish strings into separate text files for each application object.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=400546</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Import-NAVApplicationObjectLanguage</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Join-NAVApplicationObjectFile</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Merge-NAVApplicationObject</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Split-NAVApplicationObjectLanguageFile -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Split-NAVApplicationObjectLanguageFile</command:name>
      <command:verb>Split</command:verb>
      <command:noun>NAVApplicationObjectLanguageFile</command:noun>
      <maml:description>
        <maml:para>Splits a text file that contains multilanguage captions for two or more application objects into separate text files for each application object.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Split-NAVApplicationObjectLanguageFile cmdlet to split a text file that contains multilanguage captions for two or more application objects into separate text files for each application object. For example, if you have exported captions for tables 18 and 27 to a single text file such as MySolution_Languages.txt, you can use the cmdlet to create two new text files, TAB18.txt and TAB27.txt.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Split-NAVApplicationObjectLanguageFile</maml:name>
        <!-- Parameter: Source -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder that contains the text files that you want to split. The cmdlet does not modify these text files.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Destination -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies the text file or folder where you want the generated files to be put. Optionally, do not set this parameter so that you can pipe the result to another Windows PowerShell cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Force -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Source -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains the text files that you want to split. The cmdlet does not modify these text files.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder that contains the text files that you want to split. The cmdlet does not modify these text files.</maml:para>
          <maml:para>This is an alias of the Source parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Destination -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies the text file or folder where you want the generated files to be put. Optionally, do not set this parameter so that you can pipe the result to another Windows PowerShell cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Force -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Skips confirmation prompts when the cmdlet is run.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if you want to return an object for each application object and language ID with their language text values.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: Source</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Split-NAVApplicationObjectLanguageFile -Source single.txt -Destination .\RESULT\</dev:code>
        <dev:remarks>
          <maml:para>This example splits the single.txt file into separate text files for each Business Central application object that the file contains captions for, such as TAB18.txt and TAB27.txt.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=400545</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Join-NAVApplicationObjectLanguageFile</maml:linkText>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-NAVApplicationObjectFile</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Get-NAVApplicationObjectProperty -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Get-NAVApplicationObjectProperty</command:name>
      <command:verb>Get</command:verb>
      <command:noun>NAVApplicationObjectProperty</command:noun>
      <maml:description>
        <maml:para>Gets Business Central application object properties from the specified application object text files.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Get-NAVApplicationObjectProperty cmdlet to extract the values of the Version List, Date, Time, or Modified properties. You can then use the Set-NAVApplicationObjectProperty cmdlet to change the relevant property values.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Get-NAVApplicationObjectProperty</maml:name>
        <!-- Parameter: Source -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the folder where the application objects are stored that you want to get the information from.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Source -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the application objects are stored that you want to get the information from.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the application objects are stored that you want to get the information from.</maml:para>
          <maml:para>This is an alias of the Source parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: Source</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Get-NAVApplicationObjectProperty -Source .\SOURCE\COD41.txt</dev:code>
        <dev:remarks>
          <maml:para>This example gets the value of the object properties from the COD41.txt file in the SOURCE folder. The values of the properties are also shown.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=398888</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-NAVApplicationObjectProperty</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Set-NAVApplicationObjectProperty -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Set-NAVApplicationObjectProperty</command:name>
      <command:verb>Set</command:verb>
      <command:noun>NAVApplicationObjectProperty</command:noun>
      <maml:description>
        <maml:para>Sets Business Central application object properties in the specified application object text files.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use the Set-NAVApplicationObjectProperty cmdlet to change the values of the Version List, Date, Time, or Modified properties in the specified text files. You can use the Get-NAVApplicationObjectProperty cmdlet to extract information about the application objects before you change them.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Set-NAVApplicationObjectProperty</maml:name>
        <!-- Parameter: TargetPath -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath,Target">
          <maml:name>TargetPath</maml:name>
          <maml:description>
            <maml:para>Specifies the folder where the application objects are stored that you want to update. You can specify a single text file or all text files in the specified folder.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: DateTimeProperty -->
        <command:parameter required="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
          <maml:name>DateTimeProperty</maml:name>
          <maml:description>
            <maml:para>Specifies the value of the Date and Time properties that you want to apply to the specified application objects, such as 01-01-2017. You must specify date and time according to the locale of the computer that you are running Microsoft Dynamics NAV Development Shell on. For example, you can use the Get-Date Windows PowerShell cmdlet to get the date before you set the parameter, such as by typing the following command:</maml:para>
            <maml:para>Get-Date -Format g</maml:para>
            <maml:para>For more information, see the example section.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: ModifiedProperty -->
        <command:parameter required="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
          <maml:name>ModifiedProperty</maml:name>
          <maml:description>
            <maml:para>Sets a value for the Modified property for the application object. The following options are available:</maml:para>
            <maml:para>Yes</maml:para>
            <maml:para>The Modified property is set to Yes.</maml:para>
            <maml:para>No</maml:para>
            <maml:para>The Modified property is set to No.</maml:para>
            <maml:para>Possible values: Yes, No</maml:para>
          </maml:description>
          <command:parameterValue required="true">SetModifiedPropertyAction</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.Dynamics.Nav.Model.Tools.SetModifiedPropertyAction</maml:name>
            <maml:uri />
          </dev:type>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Yes</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">No</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: PassThru -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Specifies if the cmdlet must return an object that contains the application object properties for each updated application object. If you do not set this parameter, the cmdlet returns a list of the changes.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: VersionListProperty -->
        <command:parameter required="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
          <maml:name>VersionListProperty</maml:name>
          <maml:description>
            <maml:para>Sets the Version List property for the application objects. You can specify a value that will overwrite any existing values. For example, use a command such as the following:</maml:para>
            <maml:para>Set-NavApplicationObjectProperty - TargetPath .\COD1.txt -VersionListProperty "MyUpdate"</maml:para>
            <maml:para>Alternatively, you can get the property values from the objects first and then add a new value.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: TargetPath -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath,Target">
        <maml:name>TargetPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the application objects are stored that you want to update. You can specify a single text file or all text files in the specified folder.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath,Target">
        <maml:name>PSPath</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the application objects are stored that you want to update. You can specify a single text file or all text files in the specified folder.</maml:para>
          <maml:para>This is an alias of the TargetPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1" aliases="PSPath,Target">
        <maml:name>Target</maml:name>
        <maml:description>
          <maml:para>Specifies the folder where the application objects are stored that you want to update. You can specify a single text file or all text files in the specified folder.</maml:para>
          <maml:para>This is an alias of the TargetPath parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: VersionListProperty -->
      <command:parameter required="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
        <maml:name>VersionListProperty</maml:name>
        <maml:description>
          <maml:para>Sets the Version List property for the application objects. You can specify a value that will overwrite any existing values. For example, use a command such as the following:</maml:para>
          <maml:para>Set-NavApplicationObjectProperty - TargetPath .\COD1.txt -VersionListProperty "MyUpdate"</maml:para>
          <maml:para>Alternatively, you can get the property values from the objects first and then add a new value.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: ModifiedProperty -->
      <command:parameter required="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
        <maml:name>ModifiedProperty</maml:name>
        <maml:description>
          <maml:para>Sets a value for the Modified property for the application object. The following options are available:</maml:para>
          <maml:para>Yes</maml:para>
          <maml:para>The Modified property is set to Yes.</maml:para>
          <maml:para>No</maml:para>
          <maml:para>The Modified property is set to No.</maml:para>
          <maml:para>Possible values: Yes, No</maml:para>
        </maml:description>
        <command:parameterValue required="true">SetModifiedPropertyAction</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.SetModifiedPropertyAction</maml:name>
          <maml:uri />
        </dev:type>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Yes</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">No</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: DateTimeProperty -->
      <command:parameter required="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
        <maml:name>DateTimeProperty</maml:name>
        <maml:description>
          <maml:para>Specifies the value of the Date and Time properties that you want to apply to the specified application objects, such as 01-01-2017. You must specify date and time according to the locale of the computer that you are running Microsoft Dynamics NAV Development Shell on. For example, you can use the Get-Date Windows PowerShell cmdlet to get the date before you set the parameter, such as by typing the following command:</maml:para>
          <maml:para>Get-Date -Format g</maml:para>
          <maml:para>For more information, see the example section.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: PassThru -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Specifies if the cmdlet must return an object that contains the application object properties for each updated application object. If you do not set this parameter, the cmdlet returns a list of the changes.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By value and by property name: TargetPath</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By property name: VersionListProperty</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dynamics.Nav.Model.Tools.SetModifiedPropertyAction</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By property name: ModifiedProperty</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>By property name: DateTimeProperty</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Set-NAVApplicationObjectProperty -TargetPath .\COD1.txt -VersionListProperty "DemoV1" -ModifiedProperty Yes -DateTimeProperty
(Get-Date -Format g)</dev:code>
        <dev:remarks>
          <maml:para>This example sets new the values for the Version List, Date, Time, and Modified properties in the specified target file. The date and time is set to the current date and time. When the update completes, the status is shown, including the updated values of the properties.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 2  ----------</maml:title>
        <dev:code>Set-NAVApplicationObjectProperty -TargetPath .\COD1.TXT -DateTimeProperty (Get-Date -Year 2017 -Month 1 -Day 1 -Hour 0 -Minute
0 -Format g) }</dev:code>
        <dev:remarks>
          <maml:para>This example sets a new value for the Date and Time properties in the specified target file. The date and time is set to a specific, locale-agnostic date and time, January 1st, 2017. When the update completes, the status is shown, including the updated values of the properties.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 3  ----------</maml:title>
        <dev:code>Merge-NAVApplicationObject -OriginalPath .\ORIGINAL\*.txt -ModifiedPath .\MODIFIED\*.txt -TargetPath .\TARGET\*.txt -ResultPath
.\RESULT -Force -PassThru | Where-Object MergeResult -eq 'Merged' | foreach { Set-NAVApplicationObjectProperty -TargetPath
$_.ResultPath -DateTimeProperty (Get-Date -Year 2017 -Month 1 -Day 1 -Hour 0 -Minute 0 -Format g) }</dev:code>
        <dev:remarks>
          <maml:para>This example sets a new value for the Date and Time properties in the target files that are passed through by the Merge-NAVApplicationObject cmdlet. The date and time is set to a specific, locale-agnostic date and time, January 1st, 2017. When the update completes, the status is shown, including the updated values of the properties.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 4  ----------</maml:title>
        <dev:code>$result = Merge-NAVApplicationObject -OriginalPath .\ORIGINAL\*.txt -ModifiedPath .\MODIFIED\*.txt -TargetPath .\TARGET\*.txt -ResultPath
.\RESULT -Force 

$result | (Get-NAVApplicationObjectProperty -Source .\MODIFIED\COD9999.txt).VersionList
(Get-NAVApplicationObjectProperty -Source .\TARGET\COD9999.txt).VersionList
(Get-NAVApplicationObjectProperty -Source .\RESULT\COD9999.txt).VersionList
Where-Object MergeResult -eq 'Merged' |
foreach { Set-NAVApplicationObjectProperty -TargetPath $_.Result -VersionListProperty ($_.Modified.VersionList + "," + $_.Target.VersionList + "!");
Get-NAVApplicationObjectProperty -Source $_.Result }</dev:code>
        <dev:remarks>
          <maml:para>This example sets a new value for the Date and Time properties in the target files that are passed through by the Merge-NAVApplicationObject cmdlet. The date and time is set to a specific, locale-agnostic date and time, January 1st, 2017. When the update completes, the status is shown, including the updated values of the properties.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=398889</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-NAVApplicationObjectProperty</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <!-- Cmdlet: Test-NAVApplicationTable -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Test-NAVApplicationTable</command:name>
      <command:verb>Test</command:verb>
      <command:noun>NAVApplicationTable</command:noun>
      <maml:description>
        <maml:para>Tests changes in Dynamics NAV application table objects to validate whether the changes are allowed if the non-schema-breaking setup where schema can be updated with user online.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>When upgrading an application on Dynamics NAV, destructive changes to application tables are not allowed. This includes changes such as: deleting a field, changing a field's data type or class, changing the SQL data type of a field, decreasing the length of a field, and changing the primary key of a table.</maml:para>
      <maml:para>You can use the Test-NAVApplicationTable cmdlet before performing the application upgrade to determine whether specific modified tables of the application include any disallowed changes.</maml:para>
      <maml:para>The test works by comparing the original version of a table object (before changes) with its modified version (after changes). It requires that you provide the original version and the modified version of the table object as text in separate .txt files. These .txt files can contain more than one table object. When the cmdlet is run, it compares the original and modified files to validate the changes, and returns the result as follows:</maml:para>
      <maml:para>- If the test detects changes that are not allowed, it fails, and an exception is thrown with the message “Changes in Application Table(s) are not allowed.".</maml:para>
      <maml:para>- If all the changes are allowed, the test succeeds, and the message "Changes in Application Table(s) are allowed." is returned.</maml:para>
      <maml:para>For example, if you have modified table 27 to include a new field compared to the original version, then the Test-NAVApplicationTable cmdlet will succeed. However, if you modified table 27 so that it removes a field compared to the original version, the Test-NAVApplicationTable cmdlet will throw an exception.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Test-NAVApplicationTable</maml:name>
        <!-- Parameter: OriginalPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="1">
          <maml:name>OriginalPath</maml:name>
          <maml:description>
            <maml:para>Specifies the path and file names of the application table object .txt files to use as the baseline in the test.</maml:para>
            <maml:para>For example, to use all text files in the ORIGINAL folder that is a subfolder to the current folder, type '.\ORIGINAL\*.txt'.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: ModifiedPath -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>ModifiedPath</maml:name>
          <maml:description>
            <maml:para>Specifies the path and file names of the application table object .txt files that contain the modified tables for comparing to the original versions.</maml:para>
            <maml:para>For example, to compare all text files in the MODIFIED folder that is a subfolder to the current folder, type '.\MODIFIED\*.txt'.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: OriginalPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1">
        <maml:name>OriginalPath</maml:name>
        <maml:description>
          <maml:para>Specifies the path and file names of the application table object .txt files to use as the baseline in the test.</maml:para>
          <maml:para>For example, to use all text files in the ORIGINAL folder that is a subfolder to the current folder, type '.\ORIGINAL\*.txt'.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: ModifiedPath -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
        <maml:name>ModifiedPath</maml:name>
        <maml:description>
          <maml:para>Specifies the path and file names of the application table object .txt files that contain the modified tables for comparing to the original versions.</maml:para>
          <maml:para>For example, to compare all text files in the MODIFIED folder that is a subfolder to the current folder, type '.\MODIFIED\*.txt'.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues />
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Test-NAVApplicationTable -OriginalPath C:\Solution\ORIGINAL\TAB*.txt -ModifiedPath C:\Solution\MODIFIED\TAB*.txt

Table 13 Salesperson/Purchaser, the change is not allowed:
Deletion: "Phone No."(Field 5053)
  Element Field 5053 Phone No.

Test-NAVApplicationTable : Changes in application table(s) are not allowed.
At line:1 char:1
+ Test-NAVApplicationTable -OriginalPath C:\Solution\ORIGINAL\TAB*.TXT  ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:String) [Test-NAVApplicationTable], ModelToolException
    + FullyQualifiedErrorId : Microsoft.Dynamics.Nav.Model.Tools.Cmdlets.TestNavApplicationTable</dev:code>
        <dev:remarks>
          <maml:para>This example compares and tests the application tables changes contained in .txt files starting with 'TAB' in the 'C:\Solution\MODIFIED' and 'C:\Solution\ORIGINAL' folder. If the specified changes are not allowed for Dynamics NAV upgrade, then the exception is thrown with the message "Changes in application table(s) are not allowed.".</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 2  ----------</maml:title>
        <dev:code>Test-NAVApplicationTable -OriginalPath C:\Solution\ORIGINAL\TAB*.txt -ModifiedPath C:\Solution\MODIFIED\TAB*.txt

Changes in application table(s) are allowed.</dev:code>
        <dev:remarks>
          <maml:para>This example compares and tests the application tables changes contained in .txt files starting with 'TAB' in the 'C:\Solution\MODIFIED' and 'C:\Solution\ORIGINAL' folder. If the specified changes are allowed for Dynamics NAV upgrade, then the message "Changes in application table(s) are allowed." is returned.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://go.microsoft.com/fwlink/?linkid=866202</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NAVApplicationTable</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
</helpItems>